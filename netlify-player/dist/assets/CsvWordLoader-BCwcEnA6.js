var S=Object.defineProperty;var b=(n,e,r)=>e in n?S(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r;var a=(n,e,r)=>b(n,typeof e!="symbol"?e+"":e,r);import{s as E,a as d,u as m}from"./index-Dsl6EN_G.js";const x="words",V="words.csv.gz",p=1e3,C=10;class ${constructor(e){a(this,"totalWords",0);a(this,"processedWords",0);a(this,"expectedCount");a(this,"abortController",null);this.expectedCount=e}getProgress(){return Math.min(this.processedWords/this.expectedCount*100,100)}cancel(){this.abortController&&(this.abortController.abort(),this.abortController=null)}async loadCsvFile(){try{console.log("Checking for CSV dictionary in Supabase storage...");const{data:e,error:r}=await E.storage.from(x).download(V);return r||!e?(console.log("CSV file not found or error accessing it:",r),!1):(console.log("CSV file found, starting processing..."),this.abortController=new AbortController,await this.processCsvFile(e))}catch(e){return console.error("Error loading CSV file:",e),!1}}async processCsvFile(e){var r;try{console.log("üóúÔ∏è Decompressing gzipped CSV file...");const c=(await this.decompressGzip(e)).split(`
`).slice(1).filter(o=>o.trim().length>0);if(this.totalWords=c.length,console.log(`CSV file loaded with ${this.totalWords} lines`),this.totalWords===0)return console.error("CSV file contains no words"),!1;const s=[];for(let o=0;o<c.length;o+=p)s.push(c.slice(o,o+p));console.log(`Processing ${s.length} chunks of ${p} words each`);for(let o=0;o<s.length;o++){if((r=this.abortController)!=null&&r.signal.aborted)return console.log("CSV processing aborted"),!1;const h=s[o].map(t=>{const i=t.split(",");if(i.length<3)return null;const g=i[0].trim().replace(/"/g,""),u=i[1].trim().replace(/"/g,""),f=parseInt(i[2].trim());return!u||!g||isNaN(f)?null:{alphagram:g.toUpperCase(),word:u.toUpperCase(),length:f}}).filter(t=>t!==null);try{await d.init(),await d.addWords(h),this.processedWords+=h.length,console.log(`Processed chunk ${o+1}/${s.length}, total: ${this.processedWords}/${this.totalWords} words`),o<s.length-1&&C>0&&await new Promise(t=>setTimeout(t,C))}catch(t){if(console.error(`Error processing chunk ${o+1}:`,t),t instanceof Error&&t.name==="QuotaExceededError")return console.error("Storage quota exceeded. Consider clearing some browser data."),m.error("Error: Espacio de almacenamiento excedido"),!1}}console.log("CSV processing complete");try{await d.saveToCache(),console.log("üíæ SQLite auto-cached after CSV load")}catch(o){console.warn("‚ö†Ô∏è Failed to auto-cache SQLite:",o)}return!0}catch(l){return console.error("Error processing CSV file:",l),m.error("Error procesando el diccionario"),!1}}async decompressGzip(e){try{const r=new DecompressionStream("gzip"),l=e.stream().pipeThrough(r),s=await(await new Response(l).blob()).text();return console.log(`‚úÖ Decompression complete: ${e.size} bytes ‚Üí ${s.length} chars`),s}catch(r){return console.error("‚ùå Gzip decompression failed:",r),console.log("üîÑ Fallback: treating as plain text"),await e.text()}}}export{$ as CsvWordLoader};
